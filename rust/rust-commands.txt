Rust commands
 
rustup doc = open the browser with the offline documentation

rustc --version = verifies the version of Rust

rustc [filename].rs = compile

cargo new [new cargo project name] = creates a folder with [name]

cargo build(do it inside a Cargo's folder project) = creates an executable file in target/debug/hello_cargo

cargo run = compile the code and run the executable in one command.

cargo check = checks the code to assure the compilation, but does not create an executable.

Crate is a collection of Rust source code files. It can be a binary crate(an executable), a library crate, etc...

If you want an external crate, you must put it on the Cargo.toml file.

cargo doc --opn = opens documentation on the browser to read about all dependenciesof our project. Then, it's possible to finde methods and functions to each dependencie

let [variable_name] = declares a variable

const [CONSTANT_NAME_EXACTLY_WITH_THIS_PATTERN]: [type] = declaring and bounding a constant

let tup: (i32, f64, u8) = (500, 6.4, 1); = declaring a tuple

let (x, y, z) = [some tup variable, like (7, 84, 1.5)] = to use the values individually.

let v1 = tup.0 = to either use the value of a tuple individually

let a = [1, 2, 3, 4, 5]; = declaring an array

let array_collection: [u32; 5] = [1, 2, 3, 4, 5] = declaring an array with 5 elements, all of them with de u32 type.

let a = [3; 5] = initializing an array with all 5 elements with value 3.

let x = a[0]; = accessing the first value;

fn function_name() {} = declaring a function in Rust

fn another_function(x: i32) {} = declaring a function with a parameter of type i32.

fn five() -> i32 {
	5
}			= declaring a function with a return value of type i32 and value 5.
